"""
Professional Report Generator - Main module
"""

import json
import os
from datetime import datetime
from pathlib import Path
from typing import Optional, Dict, Any
from backend.models import ReportData, ScanSession
from backend.config import config
from backend.agents.enhanced_report_crew import EnhancedReportGeneratorCrew
from backend.report.html_generator import HTMLReportGenerator
import logging

logger = logging.getLogger(__name__)

class ProfessionalReportGenerator:
    """Professional report generator with enterprise-grade formatting"""
    
    def __init__(self):
        self.reports_dir = config.REPORTS_DIR
        self.reports_dir.mkdir(exist_ok=True)
        self.enhanced_crew = EnhancedReportGeneratorCrew(str(config.DATA_DIR))
        self.html_generator = HTMLReportGenerator(self.reports_dir)
    
    def generate_comprehensive_report(self, target_ip: str, session: Optional[ScanSession] = None) -> Dict[str, Any]:
        """Generate comprehensive professional security assessment report"""
        logger.info(f"Generating comprehensive report for {target_ip}")
        
        # Use enhanced CrewAI system
        crew_report = self.enhanced_crew.generate_professional_report(target_ip)
        
        # Load assessment data for detailed reporting
        assessment_data = self.enhanced_crew.load_assessment_data(target_ip)
        metrics = self.enhanced_crew.calculate_security_metrics(assessment_data)
        business_impact = self.enhanced_crew.assess_business_impact(metrics, assessment_data)
        
        # Generate HTML report
        html_path = self.html_generator.generate_html_report(
            target_ip, crew_report, assessment_data, metrics, business_impact
        )
        
        # Generate PDF report
        pdf_path = self.html_generator.generate_pdf_report(target_ip, html_path)
        
        # Generate executive summary
        exec_summary_path = self._generate_executive_summary(target_ip, crew_report, metrics, business_impact)
        
        # Update URLs in crew report
        crew_report.update({
            "html_path": str(html_path),
            "pdf_path": str(pdf_path),
            "executive_summary_path": str(exec_summary_path),
            "report_generated_at": datetime.now().isoformat()
        })
        
        logger.info(f"Comprehensive report generated successfully for {target_ip}")
        return crew_report
    
    def _generate_executive_summary(self, target_ip: str, crew_report: Dict[str, Any], 
                                   metrics, business_impact) -> Path:
        """Generate executive summary document"""
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        summary_path = self.reports_dir / f"executive_summary_{target_ip}_{timestamp}.md"
        
        # Generate executive summary content
        summary_content = f"""# Executive Summary - Security Assessment

## Target: {target_ip}
**Assessment Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
**Classification:** Confidential
**Risk Level:** {business_impact.overall_risk_level}

## Key Findings
- **Network Services:** {metrics.total_services} services identified
- **Total Vulnerabilities:** {metrics.total_vulnerabilities}
- **Critical Issues:** {metrics.critical_vulnerabilities}
- **Successful Exploits:** {metrics.successful_exploits}
- **Risk Score:** {metrics.risk_score:.1f}/10

## Business Impact
**Financial Risk:** {business_impact.financial_impact_estimate}
**Operational Impact:** {business_impact.operational_impact}
**Remediation Priority:** {business_impact.remediation_priority}

## Immediate Actions Required
{f"• {metrics.critical_vulnerabilities} critical vulnerabilities require immediate attention" if metrics.critical_vulnerabilities > 0 else "• No critical vulnerabilities identified"}
{f"• {metrics.successful_exploits} successful exploits require immediate remediation" if metrics.successful_exploits > 0 else ""}

## Executive Summary
{crew_report.get('executive_summary', 'Professional security assessment completed.')}

---
*Generated by BreachPilot Professional Security Assessment Platform*
"""
        
        with open(summary_path, 'w', encoding='utf-8') as f:
            f.write(summary_content.strip())
        
        logger.info(f"Executive summary saved to {summary_path}")
        return summary_path

    def generate_report(self, session: ScanSession) -> ReportData:
        """Legacy method for backwards compatibility"""
        logger.info(f"Generating legacy report for {session.target_ip}")
        
        # Use enhanced report generation
        comprehensive_report = self.generate_comprehensive_report(session.target_ip, session)
        
        # Convert to legacy ReportData format
        report_data = ReportData(
            target_ip=session.target_ip,
            osint_result=session.osint_result,
            nmap_result=session.nmap_result,
            analyst_result=session.analyst_result,
            poc_results=session.poc_results,
            exploit_results=session.exploit_results
        )
        
        # Set generated content
        report_data.executive_summary = comprehensive_report.get('executive_summary', '')
        report_data.pdf_path = comprehensive_report.get('pdf_path', '')
        
        # Save report data
        self._save_report_data(session.target_ip, report_data)
        
        return report_data
    
    def _save_report_data(self, target_ip: str, report_data: ReportData):
        """Save report data to JSON"""
        output_file = config.DATA_DIR / f"{target_ip}_report.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(report_data.model_dump(), f, indent=2, default=str)
        logger.info(f"Report data saved to {output_file}")
