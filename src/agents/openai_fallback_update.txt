    async def _fallback_analysis(self, scan_results: Dict[str, Any]) -> Dict[str, Any]:
        """Fallback when AI unavailable"""
        print("ðŸ“Š Using fallback pattern matching...")
        
        vulnerabilities = []
        
        # Enhanced CVE database with Zerologon and PoC info
        cve_db = {
            "active directory ldap": {
                "pattern": "Microsoft Windows Active Directory LDAP",
                "cves": [
                    {
                        "cve": "CVE-2020-1472",
                        "description": "Zerologon - Netlogon Elevation of Privilege Vulnerability",
                        "cvss_score": 10.0,
                        "severity": "CRITICAL",
                        "why_identified": "Windows Server DC with Netlogon service exposed",
                        "poc_available": True,
                        "github_repos": ["https://github.com/dirkjanm/CVE-2020-1472", "https://github.com/SecuraBV/CVE-2020-1472"],
                        "exploitdb_entries": ["EDB-49071"]
                    }
                ]
            },
            "kerberos": {
                "pattern": "kerberos",
                "cves": [
                    {
                        "cve": "CVE-2022-37966",
                        "description": "Kerberos Bronze Bit Attack",
                        "cvss_score": 8.1,
                        "severity": "HIGH",
                        "why_identified": "Kerberos service detected on port 88",
                        "poc_available": True,
                        "github_repos": ["https://github.com/ly4k/Certipy"],
                        "exploitdb_entries": []
                    }
                ]
            },
            "microsoft-ds": {
                "pattern": "microsoft-ds",
                "cves": [
                    {
                        "cve": "CVE-2020-0796",
                        "description": "SMBGhost - SMBv3 Remote Code Execution",
                        "cvss_score": 10.0,
                        "severity": "CRITICAL",
                        "why_identified": "SMB service on Windows Server detected",
                        "poc_available": True,
                        "github_repos": ["https://github.com/chompie1337/SMBGhost_RCE_PoC"],
                        "exploitdb_entries": ["EDB-48267"]
                    }
                ]
            },
            "ms-wbt-server": {
                "pattern": "ms-wbt-server",
                "cves": [
                    {
                        "cve": "CVE-2019-0708",
                        "description": "BlueKeep RDP Remote Code Execution",
                        "cvss_score": 9.8,
                        "severity": "CRITICAL",
                        "why_identified": "RDP service detected on port 3389",
                        "poc_available": True,
                        "github_repos": ["https://github.com/robertdavidgraham/rdpscan"],
                        "exploitdb_entries": ["EDB-47683"]
                    }
                ]
            }
        }
        
        ports = scan_results.get("ports", [])
        
        for port in ports:
            service = port.get("service", "").lower()
            version = port.get("version", "").lower()
            combined = f"{service} {version}"
            
            for key, data in cve_db.items():
                if key in combined or data["pattern"].lower() in combined:
                    for cve_data in data["cves"]:
                        vuln = {
                            **cve_data,
                            "port": port["port"],
                            "service": port["service"],
                            "evidence": f"Service: {port.get('service')} {port.get('version', '')}"
                        }
                        vulnerabilities.append(vuln)
        
        # Sort by CVSS score
        vulnerabilities.sort(key=lambda x: x.get("cvss_score", 0), reverse=True)
        
        # Build XAI
        xai = {}
        for v in vulnerabilities:
            poc_status = "Available on GitHub" if v.get("github_repos") else "Not found"
            if v.get("github_repos"):
                poc_status = f"GitHub: {len(v.get('github_repos', []))} repos"
            if v.get("exploitdb_entries"):
                poc_status += f", ExploitDB: {', '.join(v.get('exploitdb_entries', []))}"
                
            xai[v["cve"]] = {
                "why_identified": v.get("why_identified"),
                "evidence": v.get("evidence"),
                "attack_vector": "Network-based",
                "impact": self._assess_impact(v.get("cvss_score", 0)),
                "poc_available": poc_status
            }
        
        return {
            "timestamp": datetime.now().isoformat(),
            "analysis_method": "Pattern-based Fallback",
            "vulnerabilities": vulnerabilities,
            "xai_explanations": xai
        }
