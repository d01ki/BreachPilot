"""
Simplified Report Agent for testing - fallback version
"""
from pathlib import Path
from datetime import datetime
from typing import Dict, Any, Tuple


def generate_report(target: str, artifacts: dict, work_dir: Path) -> Tuple[Path, Path]:
    """
    Generate basic Markdown and placeholder PDF reports (simplified version)
    Returns (md_path, pdf_path)
    """
    ts = datetime.now().strftime('%Y%m%d_%H%M%S')
    md_path = work_dir / f"report_{ts}.md"
    pdf_path = work_dir / f"report_{ts}.pdf"
    
    try:
        # Generate basic markdown report without advanced dependencies
        report_content = generate_basic_report(target, artifacts)
        
        # Save Markdown report
        md_path.write_text(report_content, encoding='utf-8')
        
        # Create basic PDF placeholder
        create_basic_pdf(pdf_path, report_content)
        
        return md_path, pdf_path
        
    except Exception as e:
        print(f"Report generation error: {e}")
        # Create minimal fallback report
        fallback_content = f"""# BreachPilot Test Report

**Target:** {target}
**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## Error
Report generation encountered an issue: {str(e)}

Please check the console for more details and ensure all dependencies are installed.

## Basic Results
{artifacts}
"""
        md_path.write_text(fallback_content, encoding='utf-8')
        create_basic_pdf(pdf_path, fallback_content)
        return md_path, pdf_path


def generate_basic_report(target: str, artifacts: Dict[str, Any]) -> str:
    """Generate basic report without advanced dependencies"""
    
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')
    
    report = f"""# BreachPilot Penetration Test Report

## Executive Summary

**Target:** {target}  
**Date:** {timestamp}  
**Tool:** BreachPilot AI-Assisted Penetration Testing Platform

This report contains the results of an automated penetration test focusing on CVE-2020-1472 (Zerologon) vulnerability assessment.

---

## Methodology

This assessment used BreachPilot's methodology:

1. **Network Reconnaissance** - Port scanning and service enumeration
2. **Vulnerability Analysis** - Threat assessment  
3. **Exploit Research** - PoC discovery and ranking
4. **Proof of Concept Execution** - Controlled exploitation testing
5. **Impact Analysis** - Risk assessment and reporting

---

## Technical Findings

### Artifacts Summary
"""
    
    # Add basic artifact information
    for key, value in artifacts.items():
        report += f"\n**{key}:** {value}\n"
    
    # Add basic recommendations
    report += """

---

## Recommendations

### General Security Recommendations
1. **Regular Security Updates**: Maintain current patch levels
2. **Network Monitoring**: Implement continuous security monitoring  
3. **Access Controls**: Review and strengthen access management
4. **Security Assessments**: Conduct regular penetration testing

### CVE-2020-1472 Specific
If Zerologon vulnerability is detected:
1. **Apply Microsoft Security Updates**: Install KB4556414 and later updates immediately
2. **Monitor Domain Controllers**: Check for suspicious authentication patterns
3. **Network Segmentation**: Restrict network access to domain controllers

---

## Technical Appendix

### Raw Data
```json
"""
    
    # Add raw artifact data
    import json
    try:
        report += json.dumps(artifacts, indent=2)
    except:
        report += str(artifacts)
    
    report += f"""
```

---

*Report generated by BreachPilot - Basic Version*  
*Generated on: {timestamp}*
"""
    
    return report


def create_basic_pdf(output_path: Path, content: str):
    """Create a basic PDF file (placeholder)"""
    try:
        # Try to use reportlab if available
        try:
            from reportlab.lib.pagesizes import letter
            from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
            from reportlab.lib.styles import getSampleStyleSheet
            from reportlab.lib.units import inch
            
            doc = SimpleDocTemplate(str(output_path), pagesize=letter)
            styles = getSampleStyleSheet()
            story = []
            
            # Convert markdown-like content to basic paragraphs
            lines = content.split('\n')
            for line in lines:
                if line.strip():
                    if line.startswith('# '):
                        story.append(Paragraph(line[2:], styles['Title']))
                    elif line.startswith('## '):
                        story.append(Paragraph(line[3:], styles['Heading1']))
                    elif line.startswith('### '):
                        story.append(Paragraph(line[4:], styles['Heading2']))
                    elif line.startswith('**') and line.endswith('**'):
                        story.append(Paragraph(f"<b>{line[2:-2]}</b>", styles['Normal']))
                    else:
                        story.append(Paragraph(line, styles['Normal']))
                    story.append(Spacer(1, 0.1*inch))
            
            doc.build(story)
            
        except ImportError:
            # Fallback: create minimal binary PDF
            pdf_content = f"""%PDF-1.4
1 0 obj
<<
/Type /Catalog
/Pages 2 0 R
>>
endobj

2 0 obj
<<
/Type /Pages
/Kids [3 0 R]
/Count 1
>>
endobj

3 0 obj
<<
/Type /Page
/Parent 2 0 R
/MediaBox [0 0 612 792]
/Contents 4 0 R
>>
endobj

4 0 obj
<<
/Length 44
>>
stream
BT
/F1 12 Tf
100 700 Td
(BreachPilot Report - See Markdown version) Tj
ET
endstream
endobj

xref
0 5
0000000000 65535 f 
0000000010 00000 n 
0000000053 00000 n 
0000000110 00000 n 
0000000205 00000 n 
trailer
<<
/Size 5
/Root 1 0 R
>>
startxref
300
%%EOF"""
            output_path.write_bytes(pdf_content.encode())
            
    except Exception as e:
        print(f"PDF generation failed: {e}")
        # Write minimal placeholder
        output_path.write_bytes(b"%PDF-1.4\n% BreachPilot Report - Please see Markdown version\n")
